
/*
 * This file was generated by the SOM Compiler.
 * FileName: wpminwin.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */
#ifndef wpminwin_xh
#define wpminwin_xh
class WPMinWindow;

#define WPMinWindow_MajorVersion 1
#define WPMinWindow_MinorVersion 2

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wptrans_xh
#include "wptrans.xh"
#endif

#ifndef WPMinWindow_API
#define WPMinWindow_API
/*
 * The Class API
 */

/* A procedure to create the WPMinWindow Class */
SOMEXTERN SOMClass * SOMLINK WPMinWindowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the WPMinWindow class object */
class M_WPMinWindow;
#define _WPMinWindow ((M_WPMinWindow*)WPMinWindowClassData.classObject)

/* The static interface to WPMinWindow and its instances */
SOMEXTERN struct WPMinWindowClassDataStructure {
	SOMClass *classObject;
	somMToken wpQueryWindowHandle;
	somMToken wpSetWindowHandle;
	somMToken wpQueryWindowObject;
	somMToken wpSetWindowObject;
} WPMinWindowClassData;

/*
 * -- Typedefs for Procedures that support WPMinWindow Methods
 */
extern "C" {
typedef HWND    (SOMLINK *somTD_WPMinWindow_wpQueryWindowHandle)(WPMinWindow *somSelf);
typedef VOID    (SOMLINK *somTD_WPMinWindow_wpSetWindowHandle)(WPMinWindow *somSelf,HWND hwndFrame);
typedef WPObject *   (SOMLINK *somTD_WPMinWindow_wpQueryWindowObject)(WPMinWindow *somSelf);
typedef VOID    (SOMLINK *somTD_WPMinWindow_wpSetWindowObject)(WPMinWindow *somSelf,WPObject *Object);
}


#endif /* WPMinWindow_API */


/*
 * -- The C++ Wrapper Class for WPMinWindow
 */
class WPMinWindow : public WPTransient
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!WPMinWindowClassData.classObject) 
      WPMinWindowNewClass(WPMinWindow_MajorVersion,WPMinWindow_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(WPMinWindowClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(WPMinWindowClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}

/* public method: wpQueryWindowHandle */
HWND    wpQueryWindowHandle()
{
   return (HWND) SOM_Resolve((SOMAny *)this,WPMinWindow,wpQueryWindowHandle)
	(this);
}


/* public method: wpSetWindowHandle */
VOID    wpSetWindowHandle(HWND hwndFrame)
{
   SOM_Resolve((SOMAny *)this,WPMinWindow,wpSetWindowHandle)
	(this,hwndFrame);
}


/* public method: wpQueryWindowObject */
WPObject *   wpQueryWindowObject()
{
   return (WPObject*) SOM_Resolve((SOMAny *)this,WPMinWindow,wpQueryWindowObject)
	(this);
}


/* public method: wpSetWindowObject */
VOID    wpSetWindowObject(WPObject *Object)
{
   SOM_Resolve((SOMAny *)this,WPMinWindow,wpSetWindowObject)
	(this,Object);
}



};   /* WPMinWindow */



#endif       /* wpminwin_xh */

/*
 * This file was generated by the SOM Compiler.
 * FileName: wpminwin.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */
#ifndef wpminwin_mxh
#define wpminwin_mxh
class M_WPMinWindow;

#define M_WPMinWindow_MajorVersion 1
#define M_WPMinWindow_MinorVersion 2

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wptrans_xh
#include "wptrans.xh"
#endif

#ifndef M_WPMinWindow_API
#define M_WPMinWindow_API
/*
 * The Class API
 */

/* A procedure to create the M_WPMinWindow Class */
SOMEXTERN SOMClass * SOMLINK M_WPMinWindowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the M_WPMinWindow class object */
#define _M_WPMinWindow ((SOMClass*)M_WPMinWindowClassData.classObject)

/* The static interface to M_WPMinWindow and its instances */
SOMEXTERN struct M_WPMinWindowClassDataStructure {
	SOMClass *classObject;
} M_WPMinWindowClassData;

/*
 * -- Typedefs for Procedures that support M_WPMinWindow Methods
 */
extern "C" {
}


#endif /* M_WPMinWindow_API */


/*
 * -- The C++ Wrapper Class for M_WPMinWindow
 */
class M_WPMinWindow : public M_WPTransient
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!M_WPMinWindowClassData.classObject) 
      M_WPMinWindowNewClass(M_WPMinWindow_MajorVersion,M_WPMinWindow_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(M_WPMinWindowClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(M_WPMinWindowClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}


};   /* M_WPMinWindow */



#endif       /* wpminwin_mxh */
