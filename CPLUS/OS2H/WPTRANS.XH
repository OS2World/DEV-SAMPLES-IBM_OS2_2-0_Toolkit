
/*
 * This file was generated by the SOM Compiler.
 * FileName: wptrans.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */

/*
 * 
 *  Module Header
 * 
 *  Module Name: WPTRANS
 * 
 *  OS/2 Presentation Manager Workplace class definitions
 * 
 *  Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */

#ifndef wptrans_xh
#define wptrans_xh
class WPTransient;

#define WPTransient_MajorVersion 1
#define WPTransient_MinorVersion 2

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wpobject_xh
#include "wpobject.xh"
#endif

#ifndef WPTransient_API
#define WPTransient_API
/*
 * The Class API
 */

/* A procedure to create the WPTransient Class */
SOMEXTERN SOMClass * SOMLINK WPTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the WPTransient class object */
class M_WPTransient;
#define _WPTransient ((M_WPTransient*)WPTransientClassData.classObject)

/* The static interface to WPTransient and its instances */
SOMEXTERN struct WPTransientClassDataStructure {
	SOMClass *classObject;
} WPTransientClassData;

/*
 * -- Typedefs for Procedures that support WPTransient Methods
 */
extern "C" {
}


#endif /* WPTransient_API */


/*
 * -- The C++ Wrapper Class for WPTransient
 */
class WPTransient : public WPObject
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!WPTransientClassData.classObject) 
      WPTransientNewClass(WPTransient_MajorVersion,WPTransient_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(WPTransientClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(WPTransientClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}


};   /* WPTransient */



#endif       /* wptrans_xh */

/*
 * This file was generated by the SOM Compiler.
 * FileName: wptrans.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */
#ifndef wptrans_mxh
#define wptrans_mxh
class M_WPTransient;

#define M_WPTransient_MajorVersion 1
#define M_WPTransient_MinorVersion 2

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wpobject_xh
#include "wpobject.xh"
#endif

#ifndef M_WPTransient_API
#define M_WPTransient_API
/*
 * The Class API
 */

/* A procedure to create the M_WPTransient Class */
SOMEXTERN SOMClass * SOMLINK M_WPTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the M_WPTransient class object */
#define _M_WPTransient ((SOMClass*)M_WPTransientClassData.classObject)

/* The static interface to M_WPTransient and its instances */
SOMEXTERN struct M_WPTransientClassDataStructure {
	SOMClass *classObject;
} M_WPTransientClassData;

/*
 * -- Typedefs for Procedures that support M_WPTransient Methods
 */
extern "C" {
}


#endif /* M_WPTransient_API */


/*
 * -- The C++ Wrapper Class for M_WPTransient
 */
class M_WPTransient : public M_WPObject
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!M_WPTransientClassData.classObject) 
      M_WPTransientNewClass(M_WPTransient_MajorVersion,M_WPTransient_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(M_WPTransientClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(M_WPTransientClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}


};   /* M_WPTransient */



#endif       /* wptrans_mxh */
